#include "stdafx.h"
#include <windows.h>
#include <string>
#include <stdio.h>
#include "bearssl.h"


#include <sys/types.h>


#include "Comms_http.h"
#include <BaseTsd.h>
typedef SSIZE_T ssize_t;
using std::string;
int rsa;
#pragma comment(lib,"ws2_32.lib")


static const unsigned char TA0_DN[] = {
	0x30, 0x47, 0x31, 0x0B, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13,
	0x02, 0x55, 0x53, 0x31, 0x22, 0x30, 0x20, 0x06, 0x03, 0x55, 0x04, 0x0A,
	0x13, 0x19, 0x47, 0x6F, 0x6F, 0x67, 0x6C, 0x65, 0x20, 0x54, 0x72, 0x75,
	0x73, 0x74, 0x20, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x20,
	0x4C, 0x4C, 0x43, 0x31, 0x14, 0x30, 0x12, 0x06, 0x03, 0x55, 0x04, 0x03,
	0x13, 0x0B, 0x47, 0x54, 0x53, 0x20, 0x52, 0x6F, 0x6F, 0x74, 0x20, 0x52,
	0x31
};

static const unsigned char TA0_RSA_N[] = {
	0xB6, 0x11, 0x02, 0x8B, 0x1E, 0xE3, 0xA1, 0x77, 0x9B, 0x3B, 0xDC, 0xBF,
	0x94, 0x3E, 0xB7, 0x95, 0xA7, 0x40, 0x3C, 0xA1, 0xFD, 0x82, 0xF9, 0x7D,
	0x32, 0x06, 0x82, 0x71, 0xF6, 0xF6, 0x8C, 0x7F, 0xFB, 0xE8, 0xDB, 0xBC,
	0x6A, 0x2E, 0x97, 0x97, 0xA3, 0x8C, 0x4B, 0xF9, 0x2B, 0xF6, 0xB1, 0xF9,
	0xCE, 0x84, 0x1D, 0xB1, 0xF9, 0xC5, 0x97, 0xDE, 0xEF, 0xB9, 0xF2, 0xA3,
	0xE9, 0xBC, 0x12, 0x89, 0x5E, 0xA7, 0xAA, 0x52, 0xAB, 0xF8, 0x23, 0x27,
	0xCB, 0xA4, 0xB1, 0x9C, 0x63, 0xDB, 0xD7, 0x99, 0x7E, 0xF0, 0x0A, 0x5E,
	0xEB, 0x68, 0xA6, 0xF4, 0xC6, 0x5A, 0x47, 0x0D, 0x4D, 0x10, 0x33, 0xE3,
	0x4E, 0xB1, 0x13, 0xA3, 0xC8, 0x18, 0x6C, 0x4B, 0xEC, 0xFC, 0x09, 0x90,
	0xDF, 0x9D, 0x64, 0x29, 0x25, 0x23, 0x07, 0xA1, 0xB4, 0xD2, 0x3D, 0x2E,
	0x60, 0xE0, 0xCF, 0xD2, 0x09, 0x87, 0xBB, 0xCD, 0x48, 0xF0, 0x4D, 0xC2,
	0xC2, 0x7A, 0x88, 0x8A, 0xBB, 0xBA, 0xCF, 0x59, 0x19, 0xD6, 0xAF, 0x8F,
	0xB0, 0x07, 0xB0, 0x9E, 0x31, 0xF1, 0x82, 0xC1, 0xC0, 0xDF, 0x2E, 0xA6,
	0x6D, 0x6C, 0x19, 0x0E, 0xB5, 0xD8, 0x7E, 0x26, 0x1A, 0x45, 0x03, 0x3D,
	0xB0, 0x79, 0xA4, 0x94, 0x28, 0xAD, 0x0F, 0x7F, 0x26, 0xE5, 0xA8, 0x08,
	0xFE, 0x96, 0xE8, 0x3C, 0x68, 0x94, 0x53, 0xEE, 0x83, 0x3A, 0x88, 0x2B,
	0x15, 0x96, 0x09, 0xB2, 0xE0, 0x7A, 0x8C, 0x2E, 0x75, 0xD6, 0x9C, 0xEB,
	0xA7, 0x56, 0x64, 0x8F, 0x96, 0x4F, 0x68, 0xAE, 0x3D, 0x97, 0xC2, 0x84,
	0x8F, 0xC0, 0xBC, 0x40, 0xC0, 0x0B, 0x5C, 0xBD, 0xF6, 0x87, 0xB3, 0x35,
	0x6C, 0xAC, 0x18, 0x50, 0x7F, 0x84, 0xE0, 0x4C, 0xCD, 0x92, 0xD3, 0x20,
	0xE9, 0x33, 0xBC, 0x52, 0x99, 0xAF, 0x32, 0xB5, 0x29, 0xB3, 0x25, 0x2A,
	0xB4, 0x48, 0xF9, 0x72, 0xE1, 0xCA, 0x64, 0xF7, 0xE6, 0x82, 0x10, 0x8D,
	0xE8, 0x9D, 0xC2, 0x8A, 0x88, 0xFA, 0x38, 0x66, 0x8A, 0xFC, 0x63, 0xF9,
	0x01, 0xF9, 0x78, 0xFD, 0x7B, 0x5C, 0x77, 0xFA, 0x76, 0x87, 0xFA, 0xEC,
	0xDF, 0xB1, 0x0E, 0x79, 0x95, 0x57, 0xB4, 0xBD, 0x26, 0xEF, 0xD6, 0x01,
	0xD1, 0xEB, 0x16, 0x0A, 0xBB, 0x8E, 0x0B, 0xB5, 0xC5, 0xC5, 0x8A, 0x55,
	0xAB, 0xD3, 0xAC, 0xEA, 0x91, 0x4B, 0x29, 0xCC, 0x19, 0xA4, 0x32, 0x25,
	0x4E, 0x2A, 0xF1, 0x65, 0x44, 0xD0, 0x02, 0xCE, 0xAA, 0xCE, 0x49, 0xB4,
	0xEA, 0x9F, 0x7C, 0x83, 0xB0, 0x40, 0x7B, 0xE7, 0x43, 0xAB, 0xA7, 0x6C,
	0xA3, 0x8F, 0x7D, 0x89, 0x81, 0xFA, 0x4C, 0xA5, 0xFF, 0xD5, 0x8E, 0xC3,
	0xCE, 0x4B, 0xE0, 0xB5, 0xD8, 0xB3, 0x8E, 0x45, 0xCF, 0x76, 0xC0, 0xED,
	0x40, 0x2B, 0xFD, 0x53, 0x0F, 0xB0, 0xA7, 0xD5, 0x3B, 0x0D, 0xB1, 0x8A,
	0xA2, 0x03, 0xDE, 0x31, 0xAD, 0xCC, 0x77, 0xEA, 0x6F, 0x7B, 0x3E, 0xD6,
	0xDF, 0x91, 0x22, 0x12, 0xE6, 0xBE, 0xFA, 0xD8, 0x32, 0xFC, 0x10, 0x63,
	0x14, 0x51, 0x72, 0xDE, 0x5D, 0xD6, 0x16, 0x93, 0xBD, 0x29, 0x68, 0x33,
	0xEF, 0x3A, 0x66, 0xEC, 0x07, 0x8A, 0x26, 0xDF, 0x13, 0xD7, 0x57, 0x65,
	0x78, 0x27, 0xDE, 0x5E, 0x49, 0x14, 0x00, 0xA2, 0x00, 0x7F, 0x9A, 0xA8,
	0x21, 0xB6, 0xA9, 0xB1, 0x95, 0xB0, 0xA5, 0xB9, 0x0D, 0x16, 0x11, 0xDA,
	0xC7, 0x6C, 0x48, 0x3C, 0x40, 0xE0, 0x7E, 0x0D, 0x5A, 0xCD, 0x56, 0x3C,
	0xD1, 0x97, 0x05, 0xB9, 0xCB, 0x4B, 0xED, 0x39, 0x4B, 0x9C, 0xC4, 0x3F,
	0xD2, 0x55, 0x13, 0x6E, 0x24, 0xB0, 0xD6, 0x71, 0xFA, 0xF4, 0xC1, 0xBA,
	0xCC, 0xED, 0x1B, 0xF5, 0xFE, 0x81, 0x41, 0xD8, 0x00, 0x98, 0x3D, 0x3A,
	0xC8, 0xAE, 0x7A, 0x98, 0x37, 0x18, 0x05, 0x95
};

static const unsigned char TA0_RSA_E[] = {
	0x01, 0x00, 0x01
};

static const br_x509_trust_anchor TAs[1] = {
	
	{
		{ (unsigned char *)TA0_DN, sizeof TA0_DN },
		BR_X509_TA_CA,
		{
			BR_KEYTYPE_RSA,
			{ .rsa = {
				(unsigned char *)TA0_RSA_N, sizeof TA0_RSA_N,
				(unsigned char *)TA0_RSA_E, sizeof TA0_RSA_E,
			} }
		}
	}
};

#define TAs_NUM   1

Comms_http::Comms_http()
{
	szUrl = (char*)"http://stackoverflow.com";
	string::size_type n;
	string url = mUrl;

	if (url.substr(0, 7) == "http://")
		url.erase(0, 7);

	if (url.substr(0, 8) == "https://")
		url.erase(0, 8);

	n = url.find('/');
	serverName = string();
	if (n != string::npos)
	{
		serverName = (url.substr(0, n)).c_str();
		filepath = (url.substr(n)).c_str();
		n = filepath.rfind('/');
		filename = filepath.substr(n + 1);
	}
	else
	{
		serverName = url;
		filepath = "/";
		filename = "";
	}
}


Comms_http::Comms_http(const char * c2)
{
	szUrl = (char*)c2;
	serverName = string(szUrl);
	filepath = string();

	string::size_type n;
	string url = szUrl;
	
	if (url.substr(0, 7) == "http://")
		url.erase(0, 7);

	if (url.substr(0, 8) == "https://")
		url.erase(0, 8);

	n = url.find('/');

	if (n != string::npos)
	{
		serverName = (url.substr(0, n)).c_str();
		filepath = (url.substr(n)).c_str();
		n = filepath.rfind('/');
		filename = filepath.substr(n + 1);
	}
	else
	{
		serverName = url;
		filepath = "/";
		filename = "";
	}

}

Comms_http::~Comms_http()
{
}

void Comms_http::mParseUrl(char* mUrl)
{

}

static int sock_read(void *ctx, unsigned char *buf, size_t len)
{
	for (;;) {
		ssize_t rlen;

		rlen = recv((SOCKET)ctx, (char*)buf, len, 0);
		if (rlen <= 0) {
			if (rlen < 0 && errno == EINTR) {
				continue;
			}
			return -1;
		}
		return (int)rlen;
	}
}

static int
sock_write(void *ctx, const unsigned char *buf, size_t len)
{
	for (;;) {
		ssize_t wlen;

		wlen = send((SOCKET)ctx, (char*)buf, len, 0);
		if (wlen <= 0) {
			if (wlen < 0 && errno == EINTR) {
				continue;
			}
			return -1;
		}
		return (int)wlen;
	}
}

char* Comms_http::readUrl2(long & bytesReturnedOut, char ** headerOut)
{
	const int bufSize = 512;
	char readBuffer[bufSize], sendBuffer[bufSize], tmpBuffer[bufSize];
	char *tmpResult = NULL, *result;
	long totalBytesRead, thisReadSize, headerLen;

	

	///////////// step 1, connect //////////////////////
	connectToServer((char*)serverName.c_str(), 80);

	// INIT SSL CONTEXT
	br_ssl_client_init_full(&sc, &xc, nullptr, 0);

	// Prepare buffer for I/O
	br_ssl_engine_set_buffer(&sc.eng, iobuf, sizeof iobuf, 1);
	// Easy mode
	br_sslio_init(&ioc, &sc.eng, sock_read, &conn, sock_write, &conn);

	br_ssl_client_reset(&sc, serverName.c_str(), 0);

	// Prepare buffer for GET Request

	
	int res = br_sslio_write_all(&ioc, "GET ", 4);
	if (res == -1)
	{
		printf("Err context SSL");
	}
	br_sslio_write_all(&ioc, filepath.c_str(), strlen(filepath.c_str()));
	br_sslio_write_all(&ioc, " HTTP/1.0\r\nHost: ", 17);
	br_sslio_write_all(&ioc, serverName.c_str(), strlen(serverName.c_str()));
	br_sslio_write_all(&ioc, "\r\n\r\n", 4);

	// Send the buffer
	br_sslio_flush(&ioc);

	totalBytesRead = 0;
	for (;;) {
		int rlen;
		unsigned char tmp[512];

		rlen = br_sslio_read(&ioc, tmp, sizeof tmp);
		if (rlen < 0) {
			break;
		}
		tmpResult = (char*)realloc(tmpResult, rlen + totalBytesRead);
		memcpy(tmpResult + totalBytesRead, tmp, rlen);
		totalBytesRead += rlen;
		//fwrite(tmp, 1, rlen, stdout);
	}

	//sprintf_s(tmpBuffer, "Host: %s", tmpResult);
	printf("Buffer received:\n%s", tmpResult);
	////    SetWindowText(edit3Hwnd, sendBuffer);
	//printf("Buffer being sent:\n%s", sendBuffer);

	/////////////// step 3 - get received bytes ////////////////
	//// Receive until the peer closes the connection
	//totalBytesRead = 0;
	//while (1)
	//{
	//	memset(readBuffer, 0, bufSize);
	//	thisReadSize = recv(conn, readBuffer, bufSize, 0);

	//	if (thisReadSize <= 0)
	//		break;

	//	tmpResult = (char*)realloc(tmpResult, thisReadSize + totalBytesRead);

	//	memcpy(tmpResult + totalBytesRead, readBuffer, thisReadSize);
	//	totalBytesRead += thisReadSize;
	//}

	//headerLen = getHeaderLength(tmpResult);
	//long contenLen = totalBytesRead - headerLen;
	//result = new char[contenLen + 1];
	//memcpy(result, tmpResult + headerLen, contenLen);
	//result[contenLen] = 0x0;
	//char *myTmp;

	//myTmp = new char[headerLen + 1];
	//strncpy_s(tmpResult, headerLen+1, myTmp, headerLen);
	//myTmp[headerLen] = NULL;
	//delete(tmpResult);
	//*headerOut = myTmp;

	//bytesReturnedOut = contenLen;

	closesocket(conn);

	if (br_ssl_engine_current_state(&sc.eng) == BR_SSL_CLOSED) {
		int err;

		err = br_ssl_engine_last_error(&sc.eng);
		if (err == 0) {
			fprintf(stderr, "closed.\n");
			return (char*)"Err";
		}
		else {
			fprintf(stderr, "SSL error %d\n", err);
			return (char*)"Err";
		}
	}
	else {
		fprintf(stderr,
			"socket closed without proper SSL termination\n");
		return (char*)"Err";
	}

	return(result);
}

int Comms_http::getHeaderLength(char * content)
{
	const char *srchStr1 = "\r\n\r\n", *srchStr2 = "\n\r\n\r";
	char *findPos;
	int ofset = -1;

	findPos = strstr(content, srchStr1);
	if (findPos != NULL)
	{
		ofset = findPos - content;
		ofset += strlen(srchStr1);
	}

	else
	{
		findPos = strstr(content, srchStr2);
		if (findPos != NULL)
		{
			ofset = findPos - content;
			ofset += strlen(srchStr2);
		}
	}
	return ofset;
}

void Comms_http::connectToServer(char * szServerName, WORD portNum)
{
	struct hostent *hp = nullptr;
	unsigned int addr;
	struct sockaddr_in server;
	char tmpBuffer[512];
	conn = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
	if (conn == INVALID_SOCKET)
		sprintf_s(tmpBuffer, "Invalid Socket", filepath.c_str());

	if (inet_addr(szServerName) == INADDR_NONE)
	{
		hp = gethostbyname(szServerName);
	}
	else
	{
		addr = inet_addr(szServerName);
		hp = gethostbyaddr((char*)&addr, sizeof(addr), AF_INET);
	}

	if (hp == NULL)
	{
		closesocket(conn);
		return;
	}

	server.sin_addr.s_addr = *((unsigned long*)hp->h_addr);
	server.sin_family = AF_INET;
	server.sin_port = htons(portNum);
	if (connect(conn, (struct sockaddr*)&server, sizeof(server)))
	{
		closesocket(conn);

	}
}









int main()
{
	const int bufLen = 1024;
	char *szUrl = (char*)"https://stackoverflow.com";
	long fileSize;
	char *memBuffer, *headerBuffer;
	FILE *fp;




	memBuffer = headerBuffer = NULL;
	WSADATA wsaData;
	if (WSAStartup(0x101, &wsaData) != 0)
		return -1;

	Comms_http commz = Comms_http(szUrl);

	memBuffer = commz.readUrl2(fileSize, &headerBuffer);
	printf("returned from readUrl\n");
	printf("data returned:\n%s", memBuffer);
	if (fileSize != 0)
	{
		printf("Got some data\n");
		errno_t err;
		err = fopen_s(&fp, "downloaded.file", "wb");

		fwrite(memBuffer, 1, fileSize, fp);
		fclose(fp);
		delete(memBuffer);
		delete(headerBuffer);
	}
	Sleep(10000);
	WSACleanup();
	return 0;
}

